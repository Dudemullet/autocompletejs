{
"Config Object":[
"------------------------------------------------------------------------------",
{
  "name":"initialList",
  "type":"String",
  "req":"sometimes",
  "default":false,
  "desc":[
    "The <code class='js plain'>initialList</code> property is the first list started when the user clicks on the AutoComplete widget.",
    "It's value should be the name of a <a href='docs#list_object'>List Object</a>.",
    "<code class='js plain'>initialList</code> is required when there are more than one List Objects on <a href='docs#config_object:lists'><code class='js plain'>lists</code></a>."
  ],
  "examples":[1002,1003]
},
"------------------------------------------------------------------------------",
{
  "name":"initialValue",
  "type":"Array of Token Groups",
  "req":false,
  "default":false,
  "desc":[
    "If provided, sets the initial value of the AutoComplete widget."
  ],
  "examples":[3000]
},
"------------------------------------------------------------------------------",
{
  "name":"lists",
  "type":"Object of <a href='docs#list_object'>List Objects</a>",
  "req":true,
  "default":false,
  "desc":[
    "The <code class='js plain'>lists</code> property contains all of the lists used to power the dropdown options.",
    "See the <a href='docs#list_object'>List Object</a> reference for more information on List Objects."
  ],
  "examples":[1002,1003]
},
"------------------------------------------------------------------------------",
{
  "name":"maxTokenGroups",
  "type":["Number","<code class='js keyword'>false</code>"],
  "req":false,
  "default":"<code class='js keyword'>false</code>",
  "desc":[
    "The maximum number of token groups allowed in the search bar.",
    "Set <code class='js plain'>maxTokenGroups</code> to <code class='js keyword'>false</code> to allow unlimited token groups."
  ],
  "examples":[3001]
},
"------------------------------------------------------------------------------",
{
  "name":"onChange",
  "type":"Function",
  "req":false,
  "default":false,
  "desc":[
    "Function to execute when the value of the widget changes.",
    "The first argument to the function is the new value of the widget, the second argument is the old value of the widget.",
    "If this function returns a valid widget value, then it becomes the new value.  If not, the new value stays the same."
  ],
  "examples":[6000,6001]
},
"------------------------------------------------------------------------------",
{
  "name":"placeholderHTML",
  "type":"String",
  "req":false,
  "default":"<code class='js string'>''</code>",
  "desc":[
    "A placeholder to show in the AutoComplete widget when there are no token groups."
  ],
  "examples":3005
},
"------------------------------------------------------------------------------",
{
  "name":"showErrors",
  "type":["<code class='js keyword'>false</code>","String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>showErrors</code> is an optional parameter to control how AutoComplete reports errors.",
    "Every error in AutoComplete has a unique code to help diagnose problems and search for answers.",
    "If <code class='js plain'>showErrors</code> is <code class='js keyword'>false</code> then errors will be ignored.",
    "If <code class='js plain'>showErrors</code> is <code class='js string'>'console'</code> then errors will be sent to <code class='js plain'>console.log()</code>.",
    "If <code class='js plain'>showErrors</code> is <code class='js string'>'alert'</code> then errors will annoyingly be sent to <code class='js plain'>window.alert()</code>.",
    "If <code class='js plain'>showErrors</code> is a function then the first argument is the unique error code, the second argument is an error string, and an optional third argument is a data structure that is relevant to the error."
  ],
  "examples":[3012,3088]
}
],



"List Object":[
"------------------------------------------------------------------------------",
{
  "name":"ajaxErrorHTML",
  "type":["String", "Function"],
  "req":false,
  "default":"<code class='js string'>'AJAX Error'</code>",
  "desc":[
    "An HTML string to display when an AJAX request has failed.",
    "If <code class='js plain'>ajaxErrorHTML</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return an HTML string."
  ],
  "examples":[]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxLoadingHTML",
  "type":["String", "Function"],
  "req":false,
  "default":"<code class='js string'>'Searching&amp;hellip;'</code>",
  "desc":[
    "An HTML string to display when searching for options.",
    "If <code class='js plain'>ajaxLoadingHTML</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return an HTML string."
  ],
  "examples":[4011,4037]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxOpts",
  "type":["Object","Function"],
  "req":false,
  "default":false,
  "desc":[
    "Internally, AutoComplete uses the jQuery <a href='http://api.jquery.com/jQuery.ajax/' target='_blank'><code class='js plain'>$.ajax()</code></a> method to make AJAX requests.",
    "If provided, <code class='js plain'>ajaxOpts</code> will be called with <a href='http://api.jquery.com/jQuery.extend/'><code class='js plain'>$.extend()</code></a> against the default settings.",
    "You can override any <code class='js plain'>$.ajax()</code> parameter except: <code class='js plain'>async</code>, <code class='js plain'>complete</code>, <code class='js plain'>error</code>, <code class='js plain'>statusCode</code>, <code class='js plain'>success</code> (ie: parameters that influence control flow)"
  ],
  "examples":[2004,2003]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxOpts.preProcess",
  "type":"Function",
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>preProcess</code> is an optional function that will be called after the AJAX request has finished and before the options are shown.",
    "The first argument is the data returned by the server, the second argument is the text that the user has entered, and the third argument is the current value of the AutoComplete widget.",
    "The function should return an array of <a href='docs#option_object'>Option Objects</a>."
  ],
  "examples":2003
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxOpts.url",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "The url to send an AJAX request to.",
    "The string <code class='js string'>'{input}'</code> will be replaced with the text the user has typed.",
    "The text will be escaped using <code class='js plain'>encodeURIComponent()</code>.",
    "If <code class='js plain'>url</code> is a function, the first argument is the text that the user has typed and the second argument is the current value of the AutoComplete widget."
  ],
  "examples":2001
},
"------------------------------------------------------------------------------",
{
  "name":"allowFreeform",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>false</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, allows the user to enter free-form text.",
    "If <code class='js keyword'>false</code>, the user must select an option from the list.",
    "There can still be options when <code class='js plain'>allowFreeform</code> is set to <code class='js keyword'>true</code>, but the user does not have to select one."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"cacheAjax",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>false</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, AutoComplete will cache the results of AJAX calls to localStorage using the url as the key.",
    "If <code class='js keyword'>false</code>, it will not cache and send a new AJAX request every time.",
    "If the browser does not support localStorage it will only cache results for the duration of the page.",
    "If you need to support browsers that do not have localStorage I recommend using a <a href='https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage'>polyfill</a>."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"children",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "If a string, <code class='js plain'>children</code> should be the name of a List Object.",
    "When any option from the list is selected from the dropdown, <code class='js plain'>children</code> is the name of the next list to show up in the dropdown.",
    "If <code class='js plain'>children</code> is a function, the first argument is the text that the user has typed, the second argument is the option the user selected, the third argument is the name of the list that option came from, and the fourth argument is the current value of the AutoComplete widget.",
    "If there is a <code class='js plain'>children</code> property on the Option Object selected it will supersede this <code class='js plain'>children</code> property.",
    "See the <a href='docs#option_object:children'><code class='js plain'>children</code></a> property in the Option Object reference."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"highlightMatches",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>true</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, will highlight letter matches between what the user has typed and which options have matched.",
    "This option programmatically changes the <code class='js plain'>optionHTML</code> value by adding <code class='js plain'>&lt;strong&gt;</code> tags around matching characters.",
    "It tries to not replace letters that are inside HTML tags or special HTML characters, but if you have complicated or invalid HTML markup in your <code class='js plain'>optionHTML</code> it may break."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"matchOptions",
  "type":"Function",
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>matchOptions</code> is an optional function you can include to determine which options get shown in the dropdown when the user is typing.",
    "The first argument to the function is the text that the user has entered, the second argument is an array of Option Objects for the current list, and the third argument is the current value of the AutoComplete widget.",
    "The function should return an array of Option Objects.",
    "You can return an array of <em>any</em> Option Objects from this function.  They do not have to come from the existing Option Objects in the list.",
    "This function gets executed with every 'keydown' event on the input element so it's in your best interest to make this function as fast as possible."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"noResultsHTML",
  "type":["String","Function"],
  "req":false,
  "default":"<code class='js string'>'No results found.'</code>",
  "desc":[
    "An HTML string to display when there are no options to show.",
    "If <code class='js plain'>noResultsHTML</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return an HTML string.",
    "<code class='js plain'>noResultsHTML</code> will never be shown when <code class='js plain'>allowFreeform</code> is <code class='js keyword'>true</code>."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"optionHTML",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "If <code class='js plain'>optionHTML</code> is a string, option value properties inside curly braces will be replaced with HTML-escaped values.",
    "If <code class='js plain'>optionHTML</code> is a function the first argument is the option.",
    "The function should return an HTML string.",
    "If there is an <code class='js plain'>optionHTML</code> property on the option selected it will supersede this <code class='js plain'>optionHTML</code> property. See <a href='docs#option_object:optionHTML'><code class='js plain'>optionHTML</code></a> on the Option Object."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"tokenHTML",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "If <code class='js plain'>tokenHTML</code> is a string, option value properties inside curly braces will be replaced with HTML-escaped values.",
    "If <code class='js plain'>tokenHTML</code> is a function the first argument is the option.",
    "The function should return an HTML string.",
    "If there is a <code class='js plain'>tokenHTML</code> property on the option selected it will supersede this <code class='js plain'>tokenHTML</code> property. See <a href='docs#option_object:tokenHTML'><code class='js plain'>tokenHTML</code></a> on the Option Object."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"options",
  "type":"Array of Option Objects",
  "req":false,
  "default":"[]",
  "desc":[
    "<code class='js plain'>options</code> is an array of Option Objects that determine which options to show in the dropdown for this list.",
    "See the <a href='docs#option_object'>Option Objects</a> reference."
  ]
}
],



"Option Object":[
"------------------------------------------------------------------------------",
{
  "name":"children",
  "type":"String",
  "req":false,
  "default":false,
  "desc":[
    "If specified, <code class='js plain'>children</code> should be the name of a <a href='docs#list_object'>List Object</a>.",
    "When the option is selected from the dropdown, children is the name of the next list to show.",
    "This children property will supersede a children property on the parent List Object."
  ],
  "examples":[1002]
},
"------------------------------------------------------------------------------",
{
  "name":"group",
  "type":"String",
  "req":false,
  "default":false,
  "desc":[
    "You can group options into sections using the <code class='js plain'>group</code> property.",
    "Options without groups get displayed first followed by options with groups."
  ],
  "examples":1012
},
"------------------------------------------------------------------------------",
{
  "name":"optionHTML",
  "type":"String",
  "req":false,
  "default":false,
  "desc":[
    "An HTML string to show inside the dropdown.",
    "This <code class='js plain'>optionHTML</code> property will supersede an <code class='js plain'>optionHTML</code> function on the parent list.",
    "If there is no <code class='js plain'>optionHTML</code> on the option and there is no <code class='js plain'>optionHTML</code> on the parent list and <code class='js plain'>value</code> is a string, then <code class='js plain'>optionHTML</code> gets an HTML-escaped <code class='js plain'>value</code>."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"tokenHTML",
  "type":"String",
  "req":false,
  "default":false,
  "desc":[
    "An HTML string to show inside the search bar.",
    "This <code class='js plain'>tokenHTML</code> property will supersede a <code class='js plain'>tokenHTML</code> property on the parent list.",
    "If there is no <code class='js plain'>tokenHTML</code> on the option and there is no <code class='js plain'>tokenHTML</code> on the parent <code class='js plain'>tokenHTML</code> gets the value of <code class='js plain'>optionHTML</code>."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"value",
  "type":["String","Number","Array","Object"],
  "req":true,
  "default":false,
  "desc":[
    "<code class='js plain'>value</code> is what gets saved in the AutoComplete value when the user selects the option.",
    "<code class='js plain'>value</code> can be anything that is safe to call <code class='js plain'>JSON.stringify()</code> on."
  ]
},
"------------------------------------------------------------------------------"
],



"Methods":[
"------------------------------------------------------------------------------",
{
  "name":"addOption(name, option)",
  "args":[
    ["name", "name of the list to add the option to"],
    ["option", "<a href='docs#option_object'>Option Object</a> to add to the list"]
  ],
  "desc":[
    "Add an option to a list.",
    "Returns <code class='js keyword'>true</code> if adding the option was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7000
},
"------------------------------------------------------------------------------",
{
  "name":"blur()",
  "desc":"Remove focus from the widget.",
  "examples":7001
},
"------------------------------------------------------------------------------",
{
  "name":"clear()",
  "desc":[
    "Clear the value of the widget.",
    "Has the same effect as doing <code class='js plain'>setValue([])</code>"
  ],
  "examples":7002
},
"------------------------------------------------------------------------------",
{
  "name":"destroy()",
  "desc":"Remove the widget from the DOM.",
  "examples":7003
},
"------------------------------------------------------------------------------",
{
  "name":"focus()",
  "desc":"Puts the input focus on the widget.",
  "examples":7004
},
"------------------------------------------------------------------------------",
{
  "name":"getList(name)",
  "args":[
    ["name", "name of the list to get"]
  ],
  "desc":[
    "Returns the list object if it exists.",
    "Returns <code class='js keyword'>false</code> if the list does not exist."
  ],
  "examples":7005
},
"------------------------------------------------------------------------------",
{
  "name":"getLists()",
  "desc":"Returns an object of all the lists.",
  "examples":7006
},
"------------------------------------------------------------------------------",
{
  "name":"getValue()",
  "desc":[
    "Returns the current value of the widget.",
    "Returns an empty array if the widget has no token groups."
  ],
  "examples":7007
},
"------------------------------------------------------------------------------",
{
  "name":"list(name)",
  "args":[
    ["name", "name of the list to get"]
  ],
  "desc":"Alias of <a href='docs#methods:getList'><code class='js plain'>getList(name)</code></a>"
},
"------------------------------------------------------------------------------",
{
  "noId":true,
  "name":"list(name, list)",
  "args":[
    ["name", "name of the list to add or update"],
    ["list", "<a href='docs#list_object'>List Object</a>"]
  ],
  "desc":"Alias of <a href='docs#methods:setList'><code class='js plain'>setList(name, list)</code></a>"
},
"------------------------------------------------------------------------------",
{
  "name":"removeList(name)",
  "args":[
    ["name", "name of the list to remove"]
  ],
  "desc":[
    "Returns <code class='js keyword'>true</code> if the list was removed.",
    "Returns <code class='js keyword'>false</code> if not.",
    "You cannot remove the initialList."
  ],
  "examples":7008
},
"------------------------------------------------------------------------------",
{
  "name":"removeTokenGroup(index)",
  "args":[
    ["index", "zero-based index of the token group to remove"]
  ],
  "desc":[
    "Remove a token group by array index.",
    "Returns the updated value of the widget if successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7009
},
"------------------------------------------------------------------------------",
{
  "name":"setList(name, list)",
  "args":[
    ["name", "name of the list to add or update"],
    ["list", "<a href='docs#list_object'>List Object</a>"]
  ],
  "desc":[
    "Adds a new list or updates an existing list.",
    "Returns <code class='js keyword'>true</code> if adding the list was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7010
},
"------------------------------------------------------------------------------",
{
  "name":"setValue(value)",
  "args":[
    ["value", "value to set the widget to"]
  ],
  "desc":[
    "Returns <code class='js keyword'>true</code> and updates the widget if <code class='js plain'>value</code> is valid.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7011
},
"------------------------------------------------------------------------------",
{
  "name":"val()",
  "desc":"Alias of <a href='docs#methods:getValue'><code class='js plain'>getValue()</code></a>"
},
"------------------------------------------------------------------------------",
{
  "noId":true,
  "name":"val(value)",
  "args":[
    ["value", "value to set the widget to"]
  ],
  "desc":"Alias of <a href='docs#methods:setValue'><code class='js plain'>setValue(value)</code></a>"
},
"------------------------------------------------------------------------------"
]
}