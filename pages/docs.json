{
"List Object":[
"------------------------------------------------------------------------------",
{
  "name":"ajaxEnabled",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>false</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, will send an AJAX request when the user types in the input.",
    "You can have local list options as well as requesting results from a server. See this example."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxErrorHTML",
  "type":["String", "Function"],
  "req":false,
  "default":"<code class='js string'>'AJAX Error'</code>",
  "desc":[
    "An HTML string to display when an AJAX request has failed.",
    "If <code class='js plain'>ajaxErrorHTML</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return an HTML string."
  ],
  "examples":[4011, 4037]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxLoadingHTML",
  "type":["String", "Function"],
  "req":false,
  "default":"<code class='js string'>'Searching&amp;hellip;'</code>",
  "desc":[
    "An HTML string to display when searching for options.",
    "If <code class='js plain'>ajaxLoadingHTML</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return an HTML string."
  ],
  "examples":[4011,4037]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxOpts",
  "type":["Object","Function"],
  "req":false,
  "default":false,
  "desc":[
    "Internally, AutoComplete uses the jQuery <a href='http://api.jquery.com/jQuery.ajax/' target='_blank'><code class='js plain'>$.ajax()</code></a> method to make AJAX requests.",
    "If provided, <code class='js plain'>ajaxOpts</code> will be called with <a href='http://api.jquery.com/jQuery.extend/'><code class='js plain'>$.extend()</code></a> against the default settings.",
    "You can override any <code class='js plain'>$.ajax()</code> parameter except: <code class='js plain'>async</code>, <code class='js plain'>complete</code>, <code class='js plain'>error</code>, <code class='js plain'>statusCode</code>, <code class='js plain'>success</code> (ie: parameters that influence control flow)"
  ],
  "examples":[2004,2003]
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxOpts.preProcess",
  "type":"Function",
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>preProcess</code> is an optional function that will be called after the AJAX request has finished and before the options are shown.",
    "The first argument is the data returned by the server, the second argument is the text that the user has entered, and the third argument is the current value of the AutoComplete widget.",
    "The function should return an array of <a href='docs#option_object'>Option Objects</a>."
  ],
  "examples":2003
},
"------------------------------------------------------------------------------",
{
  "name":"ajaxOpts.url",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "The url to send an AJAX request to.",
    "The string <code class='js string'>'{value}'</code> will be replaced with the text the user has typed.",
    "The text will be escaped using <code class='js plain'>encodeURIComponent()</code>.",
    "If <code class='js plain'>url</code> is a function, the first argument is the text that the user has typed and the second argument is the current value of the AutoComplete widget."
  ],
  "examples":2001
},
"------------------------------------------------------------------------------",
{
  "name":"allowFreeform",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>false</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, allows the user to enter free-form text.",
    "If <code class='js keyword'>false</code>, the user must select an option from the list.",
    "There can still be options when <code class='js plain'>allowFreeform</code> is set to <code class='js keyword'>true</code>, but the user does not have to select one."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"cacheAjax",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>true</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, AutoComplete will cache the results of AJAX calls to localStorage using the url as the key.",
    "If <code class='js keyword'>false</code>, it will not cache and send a new AJAX request every time.",
    "If the browser does not support localStorage it will only cache results for the duration of the page.",
    "If you need to support browsers that do not have localStorage I recommend using a <a href='https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage'>polyfill</a>."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"children",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "If specified, <code class='js plain'>children</code> should be the name of a List Object.",
    "When any option from this list is selected from the dropdown, <code class='js plain'>children</code> is the name of the next list to show up in the component.",
    "If there is a <code class='js plain'>children</code> property on the Option Object selected it will supersede this <code class='js plain'>children</code> property.",
    "See the <code class='js plain'>children</code> property in the <a href='docs#option_object'>Option Object</a> reference."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"highlightMatches",
  "type":"Boolean",
  "req":false,
  "default":"<code class='js keyword'>true</code>",
  "desc":[
    "If <code class='js keyword'>true</code>, will highlight letter matches between what the user has typed and which options have matched.",
    "This option programmatically changes the <code class='js plain'>optionHTML</code> value by adding <code class='js plain'>&lt;strong&gt;</code> tags around matching characters.",
    "It tries to not replace letters that are inside HTML tags, but if you have complicated HTML markup in your <code class='js plain'>optionHTML</code> it may break."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"matchOptions",
  "type":"Function",
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>matchOptions</code> is an optional function you can include to determine which options get shown in the dropdown when the user is typing.",
    "The first argument to the function is the text that the user has entered, the second argument is an array of Option Objects for the current list, and the third argument is the current value of the AutoComplete widget.",
    "The function should return an array of Option Objects.",
    "You can return an array of <em>any</em> Option Objects from this function.  They do not have to come from the existing Option Objects in the list.",
    "This function gets executed with every 'keydown' event on the input element so it's in your best interest to make this function as fast as possible."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"noResultsHTML",
  "type":["String","Function"],
  "req":false,
  "default":"<code class='js string'>'No results found.'</code>",
  "desc":[
    "An HTML string to display when there are no options to show.",
    "If <code class='js plain'>noResultsHTML</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return an HTML string.",
    "<code class='js plain'>noResultsHTML</code> will never be shown when <code class='js plain'>allowFreeform</code> is <code class='js keyword'>true</code>."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"optionHTML",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "If <code class='js plain'>optionHTML</code> is a string, strings inside curly braces will be replaced with HTML-escaped option values.",
    "If <code class='js plain'>optionHTML</code> is a function the first argument is the option.",
    "The function should return an HTML string.",
    "If there is an <code class='js plain'>optionHTML</code> property on the Option Object it will supersede this <code class='js plain'>optionHTML</code> property."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"tokenHTML",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>tokenHTML</code> is an optional function used to build the token HTML in the search bar for every option in the list.",
    "The first argument to the function is the option itself.",
    "The function should return an HTML string.",
    "If there is a <code class='js plain'>tokenHTML</code> property on the Option Object selected it will supersede this <code class='js plain'>tokenHTML</code> property.",
    "See the <code class='js plain'>tokenHTML</code> property in the <a href='docs#option_object'>Option Object</a> reference."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"preProcess",
  "type":"Function",
  "req":false,
  "desc":[
    "<code class='js plain'>preProcess</code> is an optional function you can use to process data that is returned from the server.",
    "The first argument is the data returned by the server and the second argument is the current value of the AutoComplete widget.",
    "The function should return an array of <a href='docs#option_object'>Option Objects</a>."
  ],
  "examples":2003
},
"------------------------------------------------------------------------------",
{
  "name":"url",
  "type":["String","Function"],
  "req":false,
  "default":false,
  "desc":[
    "<code class='js plain'>url</code> is the URL to send an AJAX request to when <code class='js plain'>ajaxEnabled</code> is <code class='js keyword'>true</code>.",
    "The string <code class='js string'>'{value}'</code> will be replaced with the text the user has typed.  The text will be escaped using <code class='js plain'>encodeURIComponent()</code>.",
    "If <code class='js plain'>url</code> is a function, the first argument is the text that the user has entered and the second argument is the current value of the AutoComplete widget.",
    "The function should return a url string."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"options",
  "type":"Array of Option Objects",
  "req":false,
  "default":"[]",
  "desc":[
    "<code class='js plain'>options</code> is an array of Option Objects.",
    "See the <a href='docs#option_object'>Option Objects</a> reference for more information."
  ]
}
],



"Option Object":[
"------------------------------------------------------------------------------",
{
  "name":"children",
  "type":"String",
  "req":false,
  "desc":[
    "If specified, <code class='js plain'>children</code> should be the name of a <a href='docs#list_object'>List Object</a>.",
    "When the option is selected from the dropdown, children is the name of the next list to show.",
    "This children property will supersede a children property on the parent List Object."
  ]
},
"------------------------------------------------------------------------------",
{
  "name":"group",
  "type":"String",
  "req":false,
  "desc":[
    "You can group options into sections using the {code}group{/code} property.",
    "Options without groups get displayed first followed by options with groups.",
    "You can control the sort order "
  ],
  "examples":1012
},
"------------------------------------------------------------------------------"
],



"Methods":[
"------------------------------------------------------------------------------",
{
  "name":"addOption(name, option)",
  "args":[
    ["name", "name of the list to add the option to"],
    ["option", "<a href='docs#option_object'>Option Object</a> to add to the list"]
  ],
  "desc":[
    "Add an option to a list.",
    "Returns <code class='js keyword'>true</code> if adding the option was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7000
},
"------------------------------------------------------------------------------",
{
  "name":"blur()",
  "desc":"Remove focus from the widget.",
  "examples":7001
},
"------------------------------------------------------------------------------",
{
  "name":"clear()",
  "desc":[
    "Clear the value of the widget.",
    "Has the same effect as doing <code class='js plain'>setValue([])</code>"
  ],
  "examples":7002
},
"------------------------------------------------------------------------------",
{
  "name":"destroy()",
  "desc":"Remove the widget from the DOM.",
  "examples":7003
},
"------------------------------------------------------------------------------",
{
  "name":"focus()",
  "desc":"Puts the input focus on the widget.",
  "examples":7004
},
"------------------------------------------------------------------------------",
{
  "name":"getList(name)",
  "args":[
    ["name", "name of the list to get"]
  ],
  "desc":[
    "Returns the list object if it exists.",
    "Returns <code class='js keyword'>false</code> if the list does not exist."
  ],
  "examples":7005
},
"------------------------------------------------------------------------------",
{
  "name":"getLists()",
  "desc":"Returns an object of all the lists.",
  "examples":7006
},
"------------------------------------------------------------------------------",
{
  "name":"getValue()",
  "desc":[
    "Returns the current value of the widget.",
    "Returns an empty array if the widget has no token groups."
  ],
  "examples":7007
},
"------------------------------------------------------------------------------",
{
  "name":"list(name)",
  "args":[
    ["name", "name of the list to get"]
  ],
  "desc":"Alias of <a href='docs#methods:getList'><code class='js plain'>getList(name)</code></a>"
},
"------------------------------------------------------------------------------",
{
  "noId":true,
  "name":"list(name, list)",
  "args":[
    ["name", "name of the list to add or update"],
    ["list", "<a href='docs#list_object'>List Object</a>"]
  ],
  "desc":"Alias of <a href='docs#methods:setList'><code class='js plain'>setList(name, list)</code></a>"
},
"------------------------------------------------------------------------------",
{
  "name":"removeList(name)",
  "args":[
    ["name", "name of the list to remove"]
  ],
  "desc":[
    "Returns <code class='js keyword'>true</code> if the list was removed.",
    "Returns <code class='js keyword'>false</code> if not.",
    "You cannot remove the initialList."
  ],
  "examples":7008
},
"------------------------------------------------------------------------------",
{
  "name":"removeTokenGroup(index)",
  "args":[
    ["index", "zero-based index of the token group to remove"]
  ],
  "desc":[
    "Remove a token group by array index.",
    "Returns the updated value of the widget if successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7009
},
"------------------------------------------------------------------------------",
{
  "name":"setList(name, list)",
  "args":[
    ["name", "name of the list to add or update"],
    ["list", "<a href='docs#list_object'>List Object</a>"]
  ],
  "desc":[
    "Adds a new list or updates an existing list.",
    "Returns <code class='js keyword'>true</code> if adding the list was successful.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7010
},
"------------------------------------------------------------------------------",
{
  "name":"setValue(value)",
  "args":[
    ["value", "value to set the widget to"]
  ],
  "desc":[
    "Returns <code class='js keyword'>true</code> and updates the widget if <code class='js plain'>value</code> is valid.",
    "Returns <code class='js keyword'>false</code> otherwise."
  ],
  "examples":7011
},
"------------------------------------------------------------------------------",
{
  "name":"val()",
  "desc":"Alias of <a href='docs#methods:getValue'><code class='js plain'>getValue()</code></a>"
},
"------------------------------------------------------------------------------",
{
  "noId":true,
  "name":"val(value)",
  "args":[
    ["value", "value to set the widget to"]
  ],
  "desc":"Alias of <a href='docs#methods:setValue'><code class='js plain'>setValue(value)</code></a>"
},
"------------------------------------------------------------------------------"
]
}